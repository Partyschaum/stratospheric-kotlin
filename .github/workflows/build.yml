# This workflow builds the application for pull requests and pushes to master

name: Build

on:
  push:
    branches:
      - master
    paths:
      - application/**
      - cdk/**/*Service*
      - cdk/build.gradle.kts

  pull_request:
    branches:
      - master
    paths:
      - application/**
      - cdk/**/*Service*
      - cdk/build.gradle.kts

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  build:
    runs-on: ubuntu-22.04
    name: Build the application
    outputs:
      dockerImageTag: ${{ steps.dockerImageTag.outputs.tag }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'

      - name: Build application
        working-directory: application
        run: ./gradlew build --stacktrace

      - name: Zip build reports
        if: always()
        run: zip -r reports.zip **/build/reports

      - name: Upload build reports
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: reports
          path: reports.zip

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: application-build-${{ github.run_id }}
          path: application/build
          if-no-files-found: error

      - name: Create Docker image tag
        id: dockerImageTag
        if: success()
        run: echo "tag=$(date +'%Y%m%d%H%M%S')-${GITHUB_SHA}" >> $GITHUB_OUTPUT

  publish:
    runs-on: ubuntu-22.04
    name: Push the image to the container registry
    if: github.ref == 'refs/heads/master'
    needs: build
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: application-build-${{ github.run_id }}
          path: application/build

      - name: Build and publish images
        env:
          IMAGE_TAG: ${{ needs.build.outputs.dockerImageTag }}
        working-directory: application
        run: |
          aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
          ./gradlew -PimageTag="${IMAGE_TAG}" jib

  deploy:
    runs-on: ubuntu-22.04
    name: Deploy Todo App
    needs:
      - build
      - publish
    timeout-minutes: 15
    if: github.ref == 'refs/heads/master'
    concurrency: todo-application-deployment
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'

      - name: NPM install
        working-directory: cdk
        run: npm install

      - name: Deploy service stack
        env:
          IMAGE_TAG: ${{ needs.build.outputs.dockerImageTag }}
        working-directory: cdk
        run: npm run service:deploy -- -c dockerImageTag=${IMAGE_TAG}

